{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","bs-client/tests/app.lint-test.js","bs-client/tests/helpers/destroy-app.js","bs-client/tests/helpers/ember-basic-dropdown.js","bs-client/tests/helpers/ember-cli-clipboard.js","bs-client/tests/helpers/ember-keyboard/register-test-helpers.js","bs-client/tests/helpers/ember-power-select.js","bs-client/tests/helpers/ember-simple-auth.js","bs-client/tests/helpers/ember-sortable/test-helpers.js","bs-client/tests/helpers/module-for-acceptance.js","bs-client/tests/helpers/resolver.js","bs-client/tests/helpers/start-app.js","bs-client/tests/helpers/validate-properties.js","bs-client/tests/test-helper.js","bs-client/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('bs-client/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('abilities/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/generic.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/generic.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/bs-token.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'authenticators/bs-token.js should pass ESLint\\n\\n8:12 - \\'isEmpty\\' is not defined. (no-undef)\\n8:30 - \\'isEmpty\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('authenticators/devise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/devise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/devise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/devise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/date-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-loading.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-loading.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-login-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-login-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-navigation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-paginator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-paginator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/confirmation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/confirmation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/sort-icon.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/sort-icon.js should pass ESLint\\n\\n3:8 - Expected a function expression. (func-style)');\n  });\n\n  QUnit.test('initializers/accounting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/accounting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/inject-endpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/inject-endpoints.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/inject-notifications.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/inject-notifications.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/inject-router-in-components.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/inject-router-in-components.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/inject-store-in-components.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/inject-store-in-components.js should pass ESLint\\n\\n5:3 - Expected method shorthand. (object-shorthand)');\n  });\n\n  QUnit.test('instance-initializers/permissions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/permissions.js should pass ESLint\\n\\n5:3 - Expected method shorthand. (object-shorthand)');\n  });\n\n  QUnit.test('mixins/base-date-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/base-date-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/booking-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/booking-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/common-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/common-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/error-generator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/error-generator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/filters-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/filters-mixin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/rental-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/rental-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/route-error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/route-error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/users-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/users-mixin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/role.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/role.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user-session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-session.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/edit/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/edit/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/new/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/new/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/new/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/new/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/landing/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/landing/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/landing/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/landing/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/edit/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/edit/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/new/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/new/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/new/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/new/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-in/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-in/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-out/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-out/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-up/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-up/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-up/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-up/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n4:3 - Expected method shorthand. (object-shorthand)\\n10:3 - Expected method shorthand. (object-shorthand)');\n  });\n\n  QUnit.test('serializers/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/endpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/endpoints.js should pass ESLint\\n\\n9:3 - Expected method shorthand. (object-shorthand)');\n  });\n\n  QUnit.test('services/modal-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/modal-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/permissions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/permissions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/array.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/array.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/object.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/object.js should pass ESLint\\n\\n5:3 - Expected method shorthand. (object-shorthand)\\n13:3 - Expected method shorthand. (object-shorthand)');\n  });\n});","define('bs-client/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('bs-client/tests/helpers/ember-basic-dropdown', ['exports', 'ember-basic-dropdown/test-support/helpers', 'ember-native-dom-helpers'], function (exports, _helpers, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nativeClick = exports.fireKeydown = exports.tapTrigger = exports.clickTrigger = exports.nativeTap = undefined;\n  Object.defineProperty(exports, 'nativeTap', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTap;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'tapTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.tapTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'fireKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.fireKeydown;\n    }\n  });\n  exports.default = _helpers.default;\n  var nativeClick = exports.nativeClick = _emberNativeDomHelpers.click;\n});","define('bs-client/tests/helpers/ember-cli-clipboard', ['exports', 'ember-test'], function (exports, _emberTest) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.triggerSuccess = triggerSuccess;\n  exports.triggerError = triggerError;\n\n  exports.default = function () {\n    _emberTest.default.registerAsyncHelper('triggerCopySuccess', function (app) {\n      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n      fireComponentActionFromApp(app, selector, 'success');\n    });\n\n    _emberTest.default.registerAsyncHelper('triggerCopyError', function (app) {\n      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n      fireComponentActionFromApp(app, selector, 'error');\n    });\n  };\n\n  var run = Ember.run;\n\n\n  /* === Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerSuccess(context, selector) {\n    fireComponentAction(context, selector, 'success');\n  }\n\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerError(context, selector) {\n    fireComponentAction(context, selector, 'error');\n  }\n\n  /* === Acceptance Test Helpers === */\n\n  /**\n   * Default export is a function that registers acceptance test helpers\n   */\n\n\n  /* === Private Functions === */\n\n  /**\n   * Fires named action for an instance of a copy-button component in an app\n   * @function fireComponentActionFromApp\n   * @param {Object} app - Ember application\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentActionFromApp(app, selector, actionName) {\n    fireComponentAction({\n      container: app.__container__,\n      $: app.$\n    }, selector, actionName);\n  }\n\n  /**\n   * Fires named action for an instance of a copy-button component\n   * @function fireComponentAction\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentAction(context, selector, actionName) {\n    var component = getComponentBySelector(context, selector);\n    fireActionByName(component, actionName);\n  }\n\n  /**\n   * Fetches component reference for a given context and selector\n   * @function getComponentBySelector\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Object} component object\n   */\n  function getComponentBySelector(context) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n    var emberId = context.$(selector).attr('id');\n    return context.container.lookup('-view-registry:main')[emberId];\n  }\n\n  /**\n   * Fires a component's action given an action name\n   * @function fireActionByName\n   * @param {Ember.Component} component - component to fire action from\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireActionByName(component, actionName) {\n    var action = component[actionName];\n\n    run(function () {\n      if (typeof action === 'string') {\n        component.sendAction(action);\n      } else {\n        action();\n      }\n    });\n  }\n});","define('bs-client/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _emberKeyboard, _modifiersArray, _getCmdKey) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_modifiersArray.default.indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n});","define('bs-client/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  Object.defineProperty(exports, 'findContains', {\n    enumerable: true,\n    get: function () {\n      return _helpers.findContains;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseDown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseDown;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseUp', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseUp;\n    }\n  });\n  Object.defineProperty(exports, 'triggerKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.triggerKeydown;\n    }\n  });\n  Object.defineProperty(exports, 'typeInSearch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.typeInSearch;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'nativeTouch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTouch;\n    }\n  });\n  Object.defineProperty(exports, 'touchTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.touchTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'selectChoose', {\n    enumerable: true,\n    get: function () {\n      return _helpers.selectChoose;\n    }\n  });\n  exports.default = _helpers.default;\n});","define('bs-client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('bs-client/tests/helpers/ember-sortable/test-helpers', ['ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function () {\n  'use strict';\n});","define('bs-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'bs-client/tests/helpers/start-app', 'bs-client/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var Promise = Ember.RSVP.Promise;\n});","define('bs-client/tests/helpers/resolver', ['exports', 'bs-client/resolver', 'bs-client/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('bs-client/tests/helpers/start-app', ['exports', 'bs-client/app', 'bs-client/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('bs-client/tests/helpers/validate-properties', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n\n  var run = Ember.run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('bs-client/tests/test-helper', ['bs-client/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('bs-client/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n19:11 - \\'afterEach\\' is never reassigned. Use \\'const\\' instead. (prefer-const)');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/start-app.js should pass ESLint\\n\\n10:9 - \\'application\\' is never reassigned. Use \\'const\\' instead. (prefer-const)');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('bs-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvCA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;","file":"tests.js"}