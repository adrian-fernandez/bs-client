{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","bs-client/tests/acceptance/bookings-list-test.js","bs-client/tests/acceptance/login-test.js","bs-client/tests/acceptance/rentals-list-test.js","bs-client/tests/app.lint-test.js","bs-client/tests/helpers/destroy-app.js","bs-client/tests/helpers/ember-basic-dropdown.js","bs-client/tests/helpers/ember-cli-clipboard.js","bs-client/tests/helpers/ember-keyboard/register-test-helpers.js","bs-client/tests/helpers/ember-power-select.js","bs-client/tests/helpers/ember-simple-auth.js","bs-client/tests/helpers/ember-sortable/test-helpers.js","bs-client/tests/helpers/ember-test-selectors.js","bs-client/tests/helpers/module-for-acceptance.js","bs-client/tests/helpers/resolver.js","bs-client/tests/helpers/start-app.js","bs-client/tests/helpers/validate-properties.js","bs-client/tests/test-helper.js","bs-client/tests/tests.lint-test.js","bs-client/tests/unit/models/booking-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('bs-client/tests/acceptance/bookings-list-test', ['qunit', 'bs-client/tests/helpers/module-for-acceptance', 'bs-client/tests/helpers/ember-simple-auth'], function (_qunit, _moduleForAcceptance, _emberSimpleAuth) {\n  'use strict';\n\n  (0, _moduleForAcceptance.default)('Acceptance | bookings list', {\n    needs: ['model:me', 'model:user', 'model:booking', 'model:permission']\n  }); /* global server */\n\n\n  (0, _qunit.test)('requesting bookings to server', function (assert) {\n    assert.equal(1, 1);\n\n    server.get('/bookings', function (db, request) {\n      var params = request.queryParams;\n\n      assert.equal(params.date_filter, 'upcoming', 'date_filter do not match the expected ones');\n      assert.equal(params.page, 0, 'page does not match the expected one');\n      assert.equal(params.sort_direction, 'desc', 'sort_direction does not match the expected one');\n      assert.equal(params.sort_field, 'start_at', 'sort_field does not match the expected one');\n\n      return db.bookings.all();\n    });\n\n    server.get('/users/me', function () {\n      return {};\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: 1 });\n    visit('/bookings');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/bookings');\n    });\n  });\n\n  (0, _qunit.test)('listing started bookings as admin', function (assert) {\n    var adminUser = server.create('user', 'adminUser');\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: adminUser.id });\n\n    server.get('/bookings', function () {\n      var today = new moment(new Date());\n      var yesterday = today.add(-1, 'days');\n      var tomorrow = today.add(1, 'days');\n\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Abshire LLC', 'daily_rate': 99.49, 'user_id': adminUser.id }],\n        'bookings': [{ 'id': 1, 'rental_id': 1, 'start_at': yesterday.format('YYYY/MM/DD'), 'end_at': tomorrow.format('YYYY/MM/DD'), 'days': 1, 'price': 99.49, 'user_id': adminUser.id }],\n        'users': [{ 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'admin' }]\n      };\n    });\n\n    server.get('/users', function () {\n      return {\n        'users': [{ 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'admin' }]\n      };\n    });\n\n    server.get('/users/me', function () {\n      return { user: adminUser };\n    });\n\n    visit('/bookings');\n\n    andThen(function () {\n      assert.ok(adminUser.isAdmin, 'user should be admin');\n      assert.equal(find('[data-test-booking-tr]').length, 1, 'Admin should see 3 bookings');\n      assert.equal(find('[data-test-booking-tr]:first td').length, 7, 'Admin should see 7 columns in table');\n      assert.equal(find('[data-test-booking-edit-btn]').length, 0, 'Started bookings should not be editables');\n      assert.equal(find('[data-test-booking-delete-btn]').length, 0, 'Started bookings should not be deletables');\n    });\n  });\n\n  (0, _qunit.test)('listing bookings as admin', function (assert) {\n    var adminUser = server.create('user', 'adminUser');\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: adminUser.id });\n\n    server.get('/bookings', function () {\n      var today = new moment(new Date());\n      var tomorrow = today.add(1, 'days');\n      var nextWeek = today.add(7, 'days');\n\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Abshire LLC', 'daily_rate': 99.49, 'user_id': adminUser.id }],\n        'bookings': [{ 'id': 1, 'rental_id': 1, 'start_at': tomorrow.format('YYYY/MM/DD'), 'end_at': nextWeek.format('YYYY/MM/DD'), 'days': 7, 'price': 696.43, 'user_id': adminUser.id }],\n        'users': [{ 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'admin' }]\n      };\n    });\n\n    server.get('/users', function () {\n      return {\n        'users': [{ 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'admin' }]\n      };\n    });\n\n    server.get('/users/me', function () {\n      return { user: adminUser };\n    });\n\n    visit('/bookings');\n\n    andThen(function () {\n      assert.ok(adminUser.isAdmin, 'user should be admin');\n      assert.equal(find('[data-test-booking-tr]').length, 1, 'Admin should see 3 bookings');\n      assert.equal(find('[data-test-booking-tr]:first td').length, 7, 'Admin should see 7 columns in table');\n      assert.equal(find('[data-test-booking-edit-btn]').length, 1, 'Admin should see edit button');\n      assert.equal(find('[data-test-booking-delete-btn]').length, 1, 'Admin should see delete button');\n    });\n  });\n\n  (0, _qunit.test)('listing bookings as owner', function (assert) {\n    var user = server.create('user', 'normalUser');\n\n    server.get('/bookings', function () {\n      var today = new moment(new Date());\n      var tomorrow = today.add(1, 'days');\n      var nextWeek = today.add(7, 'days');\n\n      return {\n        'bookings': [{ 'id': 1, 'start_at': tomorrow.format('YYYY/MM/DD'), 'end_at': nextWeek.format('YYYY/MM/DD'), 'days': 2, 'price': 20, 'user_id': user.id, 'rental_id': 1 }],\n        'rentals': [{ 'id': 1, 'name': 'Abshire LLC', 'daily_rate': 10, 'user_id': 1 }],\n        'users': [{ 'id': user.id, 'email': user.email, 'admin': user.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'user' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: user.id });\n\n    server.get('/users/me', function () {\n      return { user: user };\n    });\n\n    visit('/bookings');\n\n    andThen(function () {\n      assert.equal(find('[data-test-booking-delete-btn]').length, 1, 'Owner should see delete button');\n      assert.equal(find('[data-test-booking-edit-btn]').length, 1, 'Owner should see edit button');\n      assert.equal(find('[data-test-booking-tr]').length, 1, 'Owner should see one booking');\n      assert.equal(find('[data-test-booking-tr] td').length, 6, 'Onwer should see 6 columns in table');\n    });\n  });\n\n  (0, _qunit.test)('edit booking', function (assert) {\n    var user = server.create('user', 'normalUser');\n    var today = new moment();\n    var tomorrow = today.add(1, 'days');\n    var nextWeek = today.add(7, 'days');\n    var busyDay1 = today.add(10, 'days');\n\n    server.get('/bookings', function () {\n      return {\n        'bookings': [{ 'id': 1, 'start_at': tomorrow, 'end_at': nextWeek, 'days': 2, 'price': 20, 'user_id': user.id, 'rental_id': 1 }],\n        'rentals': [{ 'id': 1, 'name': 'Abshire LLC', 'daily_rate': 10, 'user_id': 1, 'busy_days': [busyDay1] }],\n        'users': [{ 'id': user.id, 'email': user.email, 'admin': user.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'user' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: user.id });\n\n    server.get('/users/me', function () {\n      return { user: user };\n    });\n\n    visit('/bookings');\n\n    andThen(function () {\n      assert.equal(find('[data-test-booking-edit-btn]').length, 1, 'Owner should see edit button');\n    });\n\n    click('[data-test-booking-edit-btn]');\n\n    andThen(function () {\n      assert.equal(find('[data-test-booking-new-dialog]').length, 1, 'User should see edit dialog');\n      assert.equal(find('[data-test-booking-form-rental-name-input]').length, 1, 'User should see rental select');\n      assert.equal(find('[data-test-booking-dialog-from-date-div] input').length, 1, 'User should see \\'from date\\' input');\n      assert.equal(find('[data-test-booking-dialog-to-date-div] input').length, 1, 'User should \\'to date\\' input');\n\n      assert.equal(find('[data-test-booking-form-confirm-btn]').length, 1, 'User should see confirm button');\n    });\n  });\n});","define('bs-client/tests/acceptance/login-test', ['qunit', 'bs-client/tests/helpers/module-for-acceptance'], function (_qunit, _moduleForAcceptance) {\n  'use strict';\n\n  /* global server */\n  (0, _moduleForAcceptance.default)('Acceptance | login', {\n    needs: ['model:me', 'model:permission']\n  });\n\n  (0, _qunit.test)('visiting /login', function (assert) {\n    server.post('/user_sessions.json', function (db, request) {\n      if (request.params.session) {\n        assert.equal(request.params.session.email, 'email_0@example.com', 'email does not match the expected one');\n        assert.equal(request.params.session.password, 'password_0', 'password does not match the expected one');\n      }\n\n      return { 'user': { 'id': 2, 'email': 'admin@adrian-bs.com', 'admin': true, 'role_ids': [2] }, 'session': { 'id': 7, 'access_token': '2123a309fe681eab365b419aa7aa3b94', 'accessed_at': '2017-11-26', 'revoked_at': null, 'created_at': '2017-11-26T10:46:43.514Z' } };\n    });\n\n    server.get('/users/me', function () {\n      return {};\n    });\n\n    visit('/');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/');\n    });\n\n    fillIn('[data-test-signin-email-field]', 'email_0@example.com');\n    fillIn('[data-test-signin-password-field]', 'password_0');\n    assert.equal(find('[data-test-signin-submit-btn]').length, 0, 'Login button should be shown');\n    assert.equal(find('[data-test-signout-link]').length, 0, 'Logout button should not be shown');\n\n    andThen(function () {\n      assert.equal(find('[data-test-signin-email-field]').val(), 'email_0@example.com');\n      assert.equal(find('[data-test-signin-password-field]').val(), 'password_0');\n    });\n\n    click('[data-test-signin-submit-btn]');\n  });\n});","define('bs-client/tests/acceptance/rentals-list-test', ['qunit', 'bs-client/tests/helpers/module-for-acceptance', 'bs-client/tests/helpers/ember-simple-auth'], function (_qunit, _moduleForAcceptance, _emberSimpleAuth) {\n  'use strict';\n\n  //import $ from 'jquery';\n\n  (0, _moduleForAcceptance.default)('Acceptance | rentals list', {\n    needs: ['model:me', 'model:user', 'model:rental', 'model:booking', 'model:permission']\n  }); /* global server */\n\n\n  (0, _qunit.test)('listing rental as admin', function (assert) {\n    var adminUser = server.create('user', 'adminUser');\n    var normalUser = server.create('user', 'normalUser');\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: 1 });\n\n    server.get('/rentals', function () {\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Rental sample name', 'daily_rate': 5.50, 'user_id': normalUser.id }, { 'id': 2, 'name': 'Rental sample name 2', 'daily_rate': 10.10, 'user_id': adminUser.id }],\n        'users': [{ 'id': normalUser.id, 'email': normalUser.email, 'admin': normalUser.admin, 'role_ids': [1] }, { 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [2] }],\n        'roles': [{ 'id': 1, 'name': 'user' }, { 'id': 2, 'name': 'admin' }]\n      };\n    });\n\n    server.get('/users', function (db, request) {\n      var params = request.queryParams;\n\n      assert.equal(params.exclude_ids, adminUser.id, 'exclude_ids does not match the expected ones');\n      assert.equal(params.paginate, 'false', 'paginate does not match the expected ones: ');\n      assert.equal(params.selected_fields.length, 2, 'selected_fields does not match the expected one');\n      assert.equal(params.selected_fields[0], 'id', 'first selected field does not match the expected one');\n      assert.equal(params.selected_fields[1], 'email', 'second selected field does not match the expected one');\n\n      return db.users.all();\n    });\n\n    server.get('/users/me', function () {\n      return { user: adminUser };\n    });\n\n    visit('/rentals');\n\n    andThen(function () {\n      assert.equal(find('[data-test-rental-book-btn]').length, 0, 'Admin should not see booking button');\n      assert.equal(find('[data-test-rental-edit-btn]').length, 2, 'Admin should see edit button');\n      assert.equal(find('[data-test-rental-delete-btn]').length, 2, 'Admin should see delete button');\n      assert.ok(adminUser.isAdmin, 'user should be admin');\n      assert.equal(find('[data-test-rental-tr]').length, 2, 'Admin should see two rentals');\n      assert.equal(find('[data-test-rental-tr]:first td').length, 4, 'Admin should see 4 columns in table');\n    });\n  });\n\n  (0, _qunit.test)('listing rentals as owner', function (assert) {\n    var normalUser = server.create('user', 'normalUser');\n    var adminUser = server.create('user', 'adminUser');\n\n    server.get('/rentals', function () {\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Rental sample name', 'daily_rate': 5.50, 'user_id': adminUser.id }, { 'id': 2, 'name': 'Rental sample name 2', 'daily_rate': 10.10, 'user_id': normalUser.id }],\n        'users': [{ 'id': normalUser.id, 'email': normalUser.email, 'admin': normalUser.admin, 'role_ids': [1] }, { 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [2] }],\n        'roles': [{ 'id': 1, 'name': 'user' }, { 'id': 2, 'name': 'admin' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: normalUser.id });\n\n    server.get('/users/me', function () {\n      return { user: normalUser };\n    });\n\n    visit('/rentals');\n\n    andThen(function () {\n      assert.equal(find('[data-test-rental-book-btn]').length, 1, 'Owner should not see booking button');\n      assert.equal(find('[data-test-rental-edit-btn]').length, 1, 'Owner should see edit button');\n      assert.equal(find('[data-test-rental-delete-btn]').length, 1, 'Owner should see delete button');\n      assert.equal(find('[data-test-rental-tr]').length, 2, 'Owner should see two rentals');\n      assert.equal(find('tbody tr:first td').length, 3, 'Onwer should see 3 columns in table');\n    });\n  });\n\n  (0, _qunit.test)('listing rental as user', function (assert) {\n    var adminUser = server.create('user', 'adminUser');\n    var normalUser = server.create('user', 'normalUser');\n    var normalUser2 = server.create('user', 'normalUser');\n\n    server.get('/rentals', function () {\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Rental sample name', 'daily_rate': 5.50, 'user_id': normalUser2.id }, { 'id': 2, 'name': 'Rental sample name 2', 'daily_rate': 10.10, 'user_id': adminUser.id }],\n        'users': [{ 'id': normalUser.id, 'email': normalUser.email, 'admin': normalUser.admin, 'role_ids': [1] }, { 'id': normalUser2.id, 'email': normalUser2.email, 'admin': normalUser2.admin, 'role_ids': [1] }, { 'id': adminUser.id, 'email': adminUser.email, 'admin': adminUser.admin, 'role_ids': [2] }],\n        'roles': [{ 'id': 1, 'name': 'user' }, { 'id': 2, 'name': 'admin' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: normalUser.id });\n\n    server.get('/users/me', function () {\n      return { user: normalUser };\n    });\n\n    visit('/rentals');\n\n    andThen(function () {\n      assert.notOk(normalUser.isAdmin, 'user should not be admin');\n      assert.equal(find('tbody tr:first td').length, 3, 'User should see 3 columns in table');\n\n      assert.equal(find('[data-test-rental-delete-btn]').length, 0, 'User should not see delete button');\n      assert.equal(find('[data-test-rental-tr]').length, 2, 'User should see two rentals');\n      assert.equal(find('[data-test-rental-edit-btn]').length, 0, 'User should not see edit button');\n\n      assert.equal(find('[data-test-rental-book-btn]').length, 2, 'User should see booking button');\n    });\n  });\n\n  (0, _qunit.test)('edit rental', function (assert) {\n    var user = server.create('user', 'normalUser');\n\n    server.get('/rentals', function () {\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Rental sample name', 'daily_rate': 99.49, 'user_id': user.id }],\n        'users': [{ 'id': user.id, 'email': user.email, 'admin': user.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'user' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: user.id });\n\n    server.get('/users/me', function () {\n      return { user: user };\n    });\n\n    visit('/rentals');\n\n    andThen(function () {\n      assert.equal(find('[data-test-rental-edit-btn]').length, 1, 'Owner should see edit button');\n      assert.equal(find('a.edit-btn').length, 1, 'Owner should see edit button');\n    });\n\n    click('[data-test-rental-edit-btn]');\n\n    andThen(function () {\n      assert.equal(find('[data-test-rental-new-dialog]').length, 1, 'User should see edit dialog');\n      assert.equal(find('[data-test-rental-new-dialog-name-input]').length, 1, 'User should see name input');\n      assert.equal(find('[data-test-rental-new-dialog-name-input]').val(), 'Rental sample name', 'Name should be loaded');\n    });\n  });\n\n  (0, _qunit.test)('book a rental', function (assert) {\n    var user = server.create('user', 'normalUser');\n    var user2 = server.create('user', 'normalUser');\n    var tomorrow = moment(new Date()).add(1, 'days');\n    var after3Days = tomorrow.add(2, 'days');\n\n    server.get('/rentals', function () {\n      return {\n        'rentals': [{ 'id': 1, 'name': 'Rental sample name', 'daily_rate': 99.49, 'user_id': user2.id, 'busy_days': [tomorrow.format('YYYY-MM-DD'), after3Days.format('YYYY-MM-DD')] }],\n        'users': [{ 'id': user2.id, 'email': user2.email, 'admin': user2.admin, 'role_ids': [1] }],\n        'roles': [{ 'id': 1, 'name': 'user' }]\n      };\n    });\n\n    (0, _emberSimpleAuth.authenticateSession)(this.application, { user_id: user.id });\n\n    server.get('/users/me', function () {\n      return { user: user };\n    });\n\n    visit('/rentals');\n\n    andThen(function () {\n      assert.equal(find('[data-test-rental-book-btn]').length, 1, 'User should see book button');\n    });\n\n    click('[data-test-rental-book-btn]');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/rentals/' + 1 + '/book');\n      assert.equal(find('[data-test-booking-new-dialog]').length, 1, 'User should see booking dialog');\n      assert.equal(find('[data-test-booking-form-rental-name-input]').length, 1, 'User should see rental input');\n      assert.equal(find('[data-test-booking-dialog-from-date-div] input').length, 1, 'User should see \\'from date\\' input');\n      assert.equal(find('[data-test-booking-dialog-to-date-div] input').length, 1, 'User should see \\'to date\\' input');\n    });\n  });\n});","define('bs-client/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('abilities/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/generic.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/generic.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('abilities/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/bs-token.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/bs-token.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/devise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/devise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/devise.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/devise.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/date-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-loading.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-loading.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-login-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-login-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-navigation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-paginator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-paginator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/x-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/x-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/confirmation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/confirmation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/modal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/modal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/sort-icon.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/sort-icon.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/accounting.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/accounting.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/inject-endpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/inject-endpoints.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/inject-notifications.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/inject-notifications.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/inject-router-in-components.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/inject-router-in-components.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/inject-store-in-components.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/inject-store-in-components.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('instance-initializers/permissions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/permissions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/base-date-picker.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/base-date-picker.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/booking-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/booking-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/common-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/common-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/error-generator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/error-generator.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/filters-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/filters-mixin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/rental-actions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/rental-actions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/route-error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/route-error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/users-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/users-mixin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/role.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/role.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user-session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-session.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/edit/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/edit/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/new/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/new/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/new/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/new/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/bookings/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/bookings/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/landing/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/landing/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/landing/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/landing/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/book/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/book/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/book/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/book/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/edit/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/edit/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/new/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/new/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/new/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/new/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/rentals/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/rentals/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-in/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-in/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-out/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-out/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-up/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-up/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('pods/sign-up/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/sign-up/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/booking.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/booking.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/rental.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/current-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/current-user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/endpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/endpoints.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/modal-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/modal-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/permissions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/permissions.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/session.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/array.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/array.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/object.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/object.js should pass ESLint\\n\\n');\n  });\n});","define('bs-client/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = Ember.Helper.helper(function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  });\n});","define('bs-client/tests/helpers/ember-basic-dropdown', ['exports', 'ember-basic-dropdown/test-support/helpers', 'ember-native-dom-helpers'], function (exports, _helpers, _emberNativeDomHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.nativeClick = exports.fireKeydown = exports.tapTrigger = exports.clickTrigger = exports.nativeTap = undefined;\n  Object.defineProperty(exports, 'nativeTap', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTap;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'tapTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.tapTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'fireKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.fireKeydown;\n    }\n  });\n  exports.default = _helpers.default;\n  var nativeClick = exports.nativeClick = _emberNativeDomHelpers.click;\n});","define('bs-client/tests/helpers/ember-cli-clipboard', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.triggerSuccess = triggerSuccess;\n  exports.triggerError = triggerError;\n\n  exports.default = function () {\n    Test.registerAsyncHelper('triggerCopySuccess', function (app) {\n      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n      fireComponentActionFromApp(app, selector, 'success');\n    });\n\n    Test.registerAsyncHelper('triggerCopyError', function (app) {\n      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n      fireComponentActionFromApp(app, selector, 'error');\n    });\n  };\n\n  var run = Ember.run;\n  var Test = Ember.Test;\n\n\n  /* === Integration Test Helpers === */\n\n  /**\n   * Fires `success` action for an instance of a copy-button component\n   * @function triggerSuccess\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerSuccess(context, selector) {\n    fireComponentAction(context, selector, 'success');\n  }\n\n  /**\n   * Fires `error` action for an instance of a copy-button component\n   * @function triggerError\n   * @param {Object} context - integration test’s this context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Void}\n   */\n  function triggerError(context, selector) {\n    fireComponentAction(context, selector, 'error');\n  }\n\n  /* === Acceptance Test Helpers === */\n\n  /**\n   * Default export is a function that registers acceptance test helpers\n   */\n\n\n  /* === Private Functions === */\n\n  /**\n   * Fires named action for an instance of a copy-button component in an app\n   * @function fireComponentActionFromApp\n   * @param {Object} app - Ember application\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentActionFromApp(app, selector, actionName) {\n    fireComponentAction({\n      container: app.__container__,\n      $: app.$\n    }, selector, actionName);\n  }\n\n  /**\n   * Fires named action for an instance of a copy-button component\n   * @function fireComponentAction\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireComponentAction(context, selector, actionName) {\n    var component = getComponentBySelector(context, selector);\n    fireActionByName(component, actionName);\n  }\n\n  /**\n   * Fetches component reference for a given context and selector\n   * @function getComponentBySelector\n   * @param {Object} context - test context\n   * @param {String|Element} selector - selector of the copy-button instance\n   * @returns {Object} component object\n   */\n  function getComponentBySelector(context) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.copy-btn';\n\n    var emberId = context.$(selector).attr('id');\n    return context.container.lookup('-view-registry:main')[emberId];\n  }\n\n  /**\n   * Fires a component's action given an action name\n   * @function fireActionByName\n   * @param {Ember.Component} component - component to fire action from\n   * @param {String} actionName - name of action\n   * @returns {Void}\n   */\n  function fireActionByName(component, actionName) {\n    var action = component[actionName];\n\n    run(function () {\n      if (typeof action === 'string') {\n        component.sendAction(action);\n      } else {\n        action();\n      }\n    });\n  }\n});","define('bs-client/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _emberKeyboard, _modifiersArray, _getCmdKey) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    Ember.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    Ember.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_modifiersArray.default.indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n});","define('bs-client/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  Object.defineProperty(exports, 'findContains', {\n    enumerable: true,\n    get: function () {\n      return _helpers.findContains;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseDown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseDown;\n    }\n  });\n  Object.defineProperty(exports, 'nativeMouseUp', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeMouseUp;\n    }\n  });\n  Object.defineProperty(exports, 'triggerKeydown', {\n    enumerable: true,\n    get: function () {\n      return _helpers.triggerKeydown;\n    }\n  });\n  Object.defineProperty(exports, 'typeInSearch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.typeInSearch;\n    }\n  });\n  Object.defineProperty(exports, 'clickTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.clickTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'nativeTouch', {\n    enumerable: true,\n    get: function () {\n      return _helpers.nativeTouch;\n    }\n  });\n  Object.defineProperty(exports, 'touchTrigger', {\n    enumerable: true,\n    get: function () {\n      return _helpers.touchTrigger;\n    }\n  });\n  Object.defineProperty(exports, 'selectChoose', {\n    enumerable: true,\n    get: function () {\n      return _helpers.selectChoose;\n    }\n  });\n  exports.default = _helpers.default;\n});","define('bs-client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('bs-client/tests/helpers/ember-sortable/test-helpers', ['ember-sortable/helpers/drag', 'ember-sortable/helpers/reorder'], function () {\n  'use strict';\n});","define('bs-client/tests/helpers/ember-test-selectors', ['exports', 'ember-test-selectors'], function (exports, _emberTestSelectors) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var deprecate = Ember.deprecate;\n\n\n  var message = 'Importing testSelector() from \"<appname>/tests/helpers/ember-test-selectors\" is deprecated. ' + 'Please import testSelector() from \"ember-test-selectors\" instead.';\n\n  deprecate(message, false, {\n    id: 'ember-test-selectors.test-selector-import',\n    until: '0.2.0',\n    url: 'https://github.com/simplabs/ember-test-selectors#usage'\n  });\n\n  exports.default = _emberTestSelectors.default;\n});","define('bs-client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'bs-client/tests/helpers/start-app'], function (exports, _qunit, _startApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        Ember.run(this.application, 'destroy');\n        if (window.server) {\n          window.server.shutdown();\n        }\n      }\n    });\n  };\n});","define('bs-client/tests/helpers/resolver', ['exports', 'bs-client/resolver', 'bs-client/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('bs-client/tests/helpers/start-app', ['exports', 'bs-client/app', 'bs-client/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('bs-client/tests/helpers/validate-properties', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n\n  var run = Ember.run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('bs-client/tests/test-helper', ['bs-client/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('bs-client/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/bookings-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/bookings-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/rentals-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/rentals-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/booking-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/booking-test.js should pass ESLint\\n\\n');\n  });\n});","define('bs-client/tests/unit/models/booking-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  var get = Ember.get;\n\n\n  (0, _emberQunit.moduleForModel)('booking', 'Unit | Model | booking', {\n    needs: ['service:validations', 'model:user', 'model:rental', 'ember-validations@validator:local/presence']\n  });\n\n  (0, _emberQunit.test)('\\'hasStarted\\' returns true if booking has started today or before', function (assert) {\n    var today = new Date();\n\n    var booking = this.subject({ startAt: today });\n    assert.equal(get(booking, 'hasStarted'), true);\n  });\n\n  (0, _emberQunit.test)('\\'hasStarted\\' returns false if booking is going to start tomorrow', function (assert) {\n    var tomorrow = moment(new Date()).add(1, 'days');\n\n    var booking = this.subject({ startAt: tomorrow });\n    assert.equal(get(booking, 'hasStarted'), false);\n  });\n\n  (0, _emberQunit.test)('\\'hasEnded\\' returns true if booking has ended today or before', function (assert) {\n    var today = new Date();\n\n    var booking = this.subject({ endAt: today });\n    assert.equal(get(booking, 'hasEnded'), true);\n  });\n\n  (0, _emberQunit.test)('\\'hasEnded\\' returns false if booking is going to end tomorrow', function (assert) {\n    var tomorrow = moment(new Date()).add(1, 'days');\n\n    var booking = this.subject({ endAt: tomorrow });\n    assert.equal(get(booking, 'hasEnded'), false);\n  });\n\n  (0, _emberQunit.test)('\\'isNow\\' returns false if booking has ended yesterday', function (assert) {\n    var day1 = moment(new Date()).add(-2, 'days');\n    var day2 = moment(new Date()).add(-1, 'days');\n\n    var booking = this.subject({ startAt: day1, endAt: day2 });\n    assert.equal(get(booking, 'isNow'), false);\n  });\n\n  (0, _emberQunit.test)('\\'isNow\\' returns false if booking is going to start tomorrow', function (assert) {\n    var day1 = moment(new Date()).add(1, 'days');\n    var day2 = moment(new Date()).add(2, 'days');\n\n    var booking = this.subject({ startAt: day1, endAt: day2 });\n    assert.equal(get(booking, 'isNow'), false);\n  });\n\n  (0, _emberQunit.test)('\\'isNow\\' returns true if booking has started but has not ended yet', function (assert) {\n    var day1 = moment(new Date()).add(-1, 'days');\n    var day2 = moment(new Date()).add(1, 'days');\n\n    var booking = this.subject({ startAt: day1, endAt: day2 });\n    assert.equal(get(booking, 'isNow'), true);\n  });\n});","require('bs-client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtrXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvCA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;","file":"tests.js"}